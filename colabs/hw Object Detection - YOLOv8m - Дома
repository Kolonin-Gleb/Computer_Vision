{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1uU-j3o4NcdnC6YTL4WF9y3IhxG9ohvGN","timestamp":1680523671389}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard","widgets":{"application/vnd.jupyter.widget-state+json":{"ceeced13f214440ca9307a0ffe68bb79":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1a5a4234361f4bfbb29e53bf1011c12c","IPY_MODEL_cceab730811642e0bc5d791309bb836d","IPY_MODEL_b82b45af97ca4f40a489a6dc34bac51f"],"layout":"IPY_MODEL_0567760941d140d68b7beda628eea63d"}},"1a5a4234361f4bfbb29e53bf1011c12c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ce62d06581564aaa912b67a8aecf5d9d","placeholder":"​","style":"IPY_MODEL_b5860128acb749e186e8b2b35571c17a","value":"100%"}},"cceab730811642e0bc5d791309bb836d":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_399f528d9a274c7498072048ed79be00","max":773236,"min":0,"orientation":"horizontal","style":"IPY_MODEL_41b8fd17d6b645cd8188ca92ca2b8ce0","value":773236}},"b82b45af97ca4f40a489a6dc34bac51f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4b65d4ee148a41dbae82d3f6a84caa14","placeholder":"​","style":"IPY_MODEL_2c7b9b939b7f4c9e9662df667d18ddb6","value":" 755k/755k [00:00&lt;00:00, 13.5MB/s]"}},"0567760941d140d68b7beda628eea63d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ce62d06581564aaa912b67a8aecf5d9d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b5860128acb749e186e8b2b35571c17a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"399f528d9a274c7498072048ed79be00":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"41b8fd17d6b645cd8188ca92ca2b8ce0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"4b65d4ee148a41dbae82d3f6a84caa14":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2c7b9b939b7f4c9e9662df667d18ddb6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0376f509fde84eb0a71a4e6ca00d4023":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_03dbade37c1746cdbcb73dd1398c25f6","IPY_MODEL_7b0c28e6b22e4d9a8363ea69e3c29dc6","IPY_MODEL_8016abe8282446aaa08a65da1f4f7adb"],"layout":"IPY_MODEL_ca5ddbaed96242fbbffe92bee86f4ae0"}},"03dbade37c1746cdbcb73dd1398c25f6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d50d102a8a9e48558636abb06865cf4c","placeholder":"​","style":"IPY_MODEL_7909e7a08be04bdeb349d92095892646","value":"100%"}},"7b0c28e6b22e4d9a8363ea69e3c29dc6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_65eed7e8deb645498db94cc0501e4c4c","max":6534387,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f81916974c2f4f53abd60e73afeb88f8","value":6534387}},"8016abe8282446aaa08a65da1f4f7adb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bb5e9af727674985a3fa82345aa655b5","placeholder":"​","style":"IPY_MODEL_009941fdfbdd45e88d5aa2c58732076a","value":" 6.23M/6.23M [00:00&lt;00:00, 39.3MB/s]"}},"ca5ddbaed96242fbbffe92bee86f4ae0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d50d102a8a9e48558636abb06865cf4c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7909e7a08be04bdeb349d92095892646":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"65eed7e8deb645498db94cc0501e4c4c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f81916974c2f4f53abd60e73afeb88f8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bb5e9af727674985a3fa82345aa655b5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"009941fdfbdd45e88d5aa2c58732076a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["## Загрузка датасета для YOLO"],"metadata":{"id":"fLe8XfFTCPSj"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ll2x9It4B8b9","executionInfo":{"status":"ok","timestamp":1680526198474,"user_tz":-180,"elapsed":21171,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"94a81e8f-de2b-4d48-e8d1-a88fb3c943aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Загрузка датасета структурированного под YOLO\n","!unzip -q /content/drive/MyDrive/Colab\\ Notebooks/Machine_learning/Datasets/buildings-yolo.zip -d /content/"],"metadata":{"id":"tVbH-CDxC3YZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Установливаем пакет ultralytics - он стоит над YOLO и выполняет все сервисные фукнции\n","!pip -q install ultralytics\n","\n","# Устанавливаем пакет пакет для отслеживания метрик обучения\n","#!pip install clearml"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m_ryu7lHHeeB","executionInfo":{"status":"ok","timestamp":1680526204494,"user_tz":-180,"elapsed":4663,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"154572de-d944-4a7c-cb03-dcf84c44513c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m490.6/490.6 KB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.8/194.8 KB\u001b[0m \u001b[31m26.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"code","source":["from ultralytics import YOLO "],"metadata":{"id":"aDWuHDMMJSwj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!mkdir -p datasets \n","!ln -s /content/buildings-yolo /content/datasets/buildings-yolo"],"metadata":{"id":"yN1qBTIaMUA7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Обучение модели"],"metadata":{"id":"-CasqWYdNWC-"}},{"cell_type":"code","source":["# Если при запуске обучения выйдет ошибка, переименную vaild на val в config.yaml "],"metadata":{"id":"BMx58M3GMHcE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Загрузка модели. В нашем случае мы используем модель YOLOv8 Medium\n","model = YOLO('yolov8m.pt')\n","\n","# Тренировка модели\n","results = model.train(\n","  task='detect',           # Тип обучения: detect - нахождение объектов, segment - сигментация, classify - классификация\n","  data='buildings-yolo/config.yaml', # Название файла с настройками датасета \n","  imgsz=512,               # Размер изображение. В нашем случае 512*512. Все изображения - квадратные\n","  epochs=30,               # Количество эпох\n","  batch=2,                 # Размер пакета для тренировки (батча)\n","  name='yolov8')           # Имя каталога результатов"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["ceeced13f214440ca9307a0ffe68bb79","1a5a4234361f4bfbb29e53bf1011c12c","cceab730811642e0bc5d791309bb836d","b82b45af97ca4f40a489a6dc34bac51f","0567760941d140d68b7beda628eea63d","ce62d06581564aaa912b67a8aecf5d9d","b5860128acb749e186e8b2b35571c17a","399f528d9a274c7498072048ed79be00","41b8fd17d6b645cd8188ca92ca2b8ce0","4b65d4ee148a41dbae82d3f6a84caa14","2c7b9b939b7f4c9e9662df667d18ddb6","0376f509fde84eb0a71a4e6ca00d4023","03dbade37c1746cdbcb73dd1398c25f6","7b0c28e6b22e4d9a8363ea69e3c29dc6","8016abe8282446aaa08a65da1f4f7adb","ca5ddbaed96242fbbffe92bee86f4ae0","d50d102a8a9e48558636abb06865cf4c","7909e7a08be04bdeb349d92095892646","65eed7e8deb645498db94cc0501e4c4c","f81916974c2f4f53abd60e73afeb88f8","bb5e9af727674985a3fa82345aa655b5","009941fdfbdd45e88d5aa2c58732076a"]},"id":"hyfoDDwgJUcS","outputId":"2f3ce612-6f81-41f6-8d8b-a222e1d4cf01","executionInfo":{"status":"ok","timestamp":1680527295240,"user_tz":-180,"elapsed":738592,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 🚀 Python-3.9.16 torch-1.13.1+cu116 CUDA:0 (Tesla T4, 15102MiB)\n","\u001b[34m\u001b[1myolo/engine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8m.pt, data=buildings-yolo/config.yaml, epochs=30, patience=50, batch=2, imgsz=512, save=True, save_period=-1, cache=False, device=None, workers=8, project=None, name=yolov8, exist_ok=False, pretrained=False, optimizer=SGD, verbose=True, seed=0, deterministic=True, single_cls=False, image_weights=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, show=False, save_txt=False, save_conf=False, save_crop=False, hide_labels=False, hide_conf=False, vid_stride=1, line_thickness=3, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, boxes=True, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, fl_gamma=0.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, mosaic=1.0, mixup=0.0, copy_paste=0.0, cfg=None, v5loader=False, tracker=botsort.yaml, save_dir=runs/detect/yolov82\n","Downloading https://ultralytics.com/assets/Arial.ttf to /root/.config/Ultralytics/Arial.ttf...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/755k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ceeced13f214440ca9307a0ffe68bb79"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Overriding model.yaml nc=80 with nc=5\n","\n","                   from  n    params  module                                       arguments                     \n","  0                  -1  1      1392  ultralytics.nn.modules.Conv                  [3, 48, 3, 2]                 \n","  1                  -1  1     41664  ultralytics.nn.modules.Conv                  [48, 96, 3, 2]                \n","  2                  -1  2    111360  ultralytics.nn.modules.C2f                   [96, 96, 2, True]             \n","  3                  -1  1    166272  ultralytics.nn.modules.Conv                  [96, 192, 3, 2]               \n","  4                  -1  4    813312  ultralytics.nn.modules.C2f                   [192, 192, 4, True]           \n","  5                  -1  1    664320  ultralytics.nn.modules.Conv                  [192, 384, 3, 2]              \n","  6                  -1  4   3248640  ultralytics.nn.modules.C2f                   [384, 384, 4, True]           \n","  7                  -1  1   1991808  ultralytics.nn.modules.Conv                  [384, 576, 3, 2]              \n","  8                  -1  2   3985920  ultralytics.nn.modules.C2f                   [576, 576, 2, True]           \n","  9                  -1  1    831168  ultralytics.nn.modules.SPPF                  [576, 576, 5]                 \n"," 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n"," 11             [-1, 6]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 12                  -1  2   1993728  ultralytics.nn.modules.C2f                   [960, 384, 2]                 \n"," 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n"," 14             [-1, 4]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 15                  -1  2    517632  ultralytics.nn.modules.C2f                   [576, 192, 2]                 \n"," 16                  -1  1    332160  ultralytics.nn.modules.Conv                  [192, 192, 3, 2]              \n"," 17            [-1, 12]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 18                  -1  2   1846272  ultralytics.nn.modules.C2f                   [576, 384, 2]                 \n"," 19                  -1  1   1327872  ultralytics.nn.modules.Conv                  [384, 384, 3, 2]              \n"," 20             [-1, 9]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 21                  -1  2   4207104  ultralytics.nn.modules.C2f                   [960, 576, 2]                 \n"," 22        [15, 18, 21]  1   3778591  ultralytics.nn.modules.Detect                [5, [192, 384, 576]]          \n","Model summary: 295 layers, 25859215 parameters, 25859199 gradients, 79.1 GFLOPs\n","\n","Transferred 469/475 items from pretrained weights\n","\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/detect/yolov82', view at http://localhost:6006/\n","\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n","Downloading https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt to yolov8n.pt...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/6.23M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0376f509fde84eb0a71a4e6ca00d4023"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n","\u001b[34m\u001b[1moptimizer:\u001b[0m SGD(lr=0.01) with parameter groups 77 weight(decay=0.0), 84 weight(decay=0.0005), 83 bias\n","\u001b[34m\u001b[1mtrain: \u001b[0mScanning /content/buildings-yolo/train/labels... 190 images, 0 backgrounds, 0 corrupt: 100%|██████████| 190/190 [00:00<00:00, 724.13it/s]\n","\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /content/buildings-yolo/train/labels.cache\n","\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","\u001b[34m\u001b[1mval: \u001b[0mScanning /content/buildings-yolo/valid/labels... 10 images, 0 backgrounds, 0 corrupt: 100%|██████████| 10/10 [00:00<00:00, 1063.65it/s]\n","\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /content/buildings-yolo/valid/labels.cache\n","Plotting labels to runs/detect/yolov82/labels.jpg... \n","Image sizes 512 train, 512 val\n","Using 2 dataloader workers\n","Logging results to \u001b[1mruns/detect/yolov82\u001b[0m\n","Starting training for 30 epochs...\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       1/30      1.08G       2.14      2.926      1.797         73        512: 100%|██████████| 95/95 [00:31<00:00,  2.99it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:01<00:00,  1.68it/s]\n","                   all         10        308      0.416      0.188      0.184     0.0819\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       2/30      1.09G      1.893      1.835      1.562        108        512: 100%|██████████| 95/95 [00:25<00:00,  3.78it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  4.96it/s]\n","                   all         10        308      0.296       0.29      0.265      0.124\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       3/30      1.11G      1.792       1.75      1.499        218        512: 100%|██████████| 95/95 [00:24<00:00,  3.90it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.32it/s]\n","                   all         10        308      0.516      0.235      0.259      0.132\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       4/30      1.13G      1.766      1.894       1.46        115        512: 100%|██████████| 95/95 [00:29<00:00,  3.20it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:01<00:00,  2.74it/s]\n","                   all         10        308      0.341      0.249       0.29      0.144\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       5/30      1.11G      1.744      1.592      1.421        179        512: 100%|██████████| 95/95 [00:22<00:00,  4.13it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.54it/s]\n","                   all         10        308      0.273      0.396      0.348      0.172\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       6/30      1.15G      1.724      1.368      1.401        242        512: 100%|██████████| 95/95 [00:23<00:00,  4.01it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.43it/s]\n","                   all         10        308      0.416      0.392      0.401      0.186\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       7/30      1.14G      1.692      1.265      1.379         72        512: 100%|██████████| 95/95 [00:22<00:00,  4.28it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:01<00:00,  2.05it/s]\n","                   all         10        308      0.576      0.423      0.462      0.215\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       8/30      1.12G      1.683      1.232      1.379         49        512: 100%|██████████| 95/95 [00:22<00:00,  4.25it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.51it/s]\n","                   all         10        308      0.517      0.442      0.454      0.207\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       9/30      1.09G      1.699      1.185      1.349        221        512: 100%|██████████| 95/95 [00:23<00:00,  4.05it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.53it/s]\n","                   all         10        308       0.59      0.392      0.464      0.234\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      10/30      1.07G      1.644      1.161      1.308        143        512: 100%|██████████| 95/95 [00:23<00:00,  3.96it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.58it/s]\n","                   all         10        308      0.467      0.466      0.474      0.238\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      11/30       1.1G      1.645      1.119      1.337         80        512: 100%|██████████| 95/95 [00:20<00:00,  4.56it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.78it/s]\n","                   all         10        308      0.526      0.393      0.461      0.233\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      12/30      1.15G      1.601      1.043      1.308         59        512: 100%|██████████| 95/95 [00:22<00:00,  4.15it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.65it/s]\n","                   all         10        308      0.508      0.447      0.456       0.22\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      13/30       1.1G      1.621      1.019      1.296        122        512: 100%|██████████| 95/95 [00:23<00:00,  3.99it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.48it/s]\n","                   all         10        308      0.471       0.42      0.457      0.226\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      14/30      1.13G      1.602      0.988      1.314         73        512: 100%|██████████| 95/95 [00:21<00:00,  4.40it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  3.83it/s]\n","                   all         10        308      0.437       0.45      0.444      0.218\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      15/30      1.16G      1.587     0.9993      1.298         35        512: 100%|██████████| 95/95 [00:22<00:00,  4.17it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.63it/s]\n","                   all         10        308      0.524      0.449      0.468      0.237\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      16/30      1.21G      1.591     0.9906      1.313         48        512: 100%|██████████| 95/95 [00:23<00:00,  3.99it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.63it/s]\n","                   all         10        308      0.522      0.498      0.467      0.236\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      17/30      1.11G      1.544     0.9315      1.262        252        512: 100%|██████████| 95/95 [00:22<00:00,  4.28it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  3.41it/s]\n","                   all         10        308      0.592      0.466      0.486      0.237\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      18/30      1.16G      1.535     0.9298      1.262         77        512: 100%|██████████| 95/95 [00:21<00:00,  4.38it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.75it/s]\n","                   all         10        308      0.549      0.445      0.476      0.232\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      19/30      1.18G      1.566     0.9054      1.284        188        512: 100%|██████████| 95/95 [00:25<00:00,  3.74it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.55it/s]\n","                   all         10        308       0.63      0.443      0.505      0.246\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      20/30      1.17G      1.548     0.9161      1.273        106        512: 100%|██████████| 95/95 [00:23<00:00,  4.09it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.50it/s]\n","                   all         10        308      0.585      0.428      0.504       0.24\n","Closing dataloader mosaic\n","\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      21/30      1.06G      1.554     0.9511      1.302         41        512: 100%|██████████| 95/95 [00:15<00:00,  5.95it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.73it/s]\n","                   all         10        308      0.575      0.509      0.523       0.25\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      22/30      1.07G       1.54     0.9237      1.291         90        512: 100%|██████████| 95/95 [00:15<00:00,  6.28it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.62it/s]\n","                   all         10        308      0.549      0.495      0.528      0.245\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      23/30      1.09G      1.517     0.9013      1.289        232        512: 100%|██████████| 95/95 [00:15<00:00,  6.22it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.49it/s]\n","                   all         10        308      0.481      0.479      0.495       0.24\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      24/30      1.06G      1.492     0.8844      1.278        116        512: 100%|██████████| 95/95 [00:15<00:00,  6.13it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  3.47it/s]\n","                   all         10        308      0.508      0.481      0.501      0.239\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      25/30      1.13G      1.486     0.8531       1.26         40        512: 100%|██████████| 95/95 [00:15<00:00,  6.27it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.52it/s]\n","                   all         10        308      0.586      0.485      0.526      0.249\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      26/30      1.11G      1.485     0.8377      1.258         95        512: 100%|██████████| 95/95 [00:15<00:00,  6.32it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.49it/s]\n","                   all         10        308      0.529      0.482      0.517      0.244\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      27/30      1.05G       1.46      0.828      1.231         36        512: 100%|██████████| 95/95 [00:15<00:00,  6.22it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.32it/s]\n","                   all         10        308      0.642      0.465      0.527      0.248\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      28/30      1.09G      1.452     0.8345      1.258        133        512: 100%|██████████| 95/95 [00:15<00:00,  6.30it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  5.62it/s]\n","                   all         10        308       0.62      0.504      0.526      0.247\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      29/30      1.05G      1.444      0.812       1.23         34        512: 100%|██████████| 95/95 [00:15<00:00,  5.98it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00<00:00,  3.60it/s]\n","                   all         10        308      0.592      0.514      0.531      0.256\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","      30/30      1.06G      1.435     0.8179      1.242         36        512: 100%|██████████| 95/95 [00:15<00:00,  6.20it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:02<00:00,  1.13it/s]\n","                   all         10        308      0.584       0.48      0.529      0.255\n","\n","30 epochs completed in 0.195 hours.\n","Optimizer stripped from runs/detect/yolov82/weights/last.pt, 52.0MB\n","Optimizer stripped from runs/detect/yolov82/weights/best.pt, 52.0MB\n","\n","Validating runs/detect/yolov82/weights/best.pt...\n","Ultralytics YOLOv8.0.61 🚀 Python-3.9.16 torch-1.13.1+cu116 CUDA:0 (Tesla T4, 15102MiB)\n","Model summary (fused): 218 layers, 25842655 parameters, 0 gradients, 78.7 GFLOPs\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:01<00:00,  1.70it/s]\n","                   all         10        308      0.595      0.516      0.531      0.256\n","                   car         10        121      0.858      0.648      0.759      0.322\n","                garage         10         16      0.179      0.178      0.105     0.0715\n","                 house         10        119      0.778      0.899      0.888      0.531\n","                  pool         10         15      0.725      0.533      0.567      0.224\n","                  road         10         37      0.435      0.324      0.337      0.131\n","Speed: 0.2ms preprocess, 31.8ms inference, 0.0ms loss, 4.6ms postprocess per image\n","Results saved to \u001b[1mruns/detect/yolov82\u001b[0m\n"]}]},{"cell_type":"markdown","source":["#Проверка точности модели на проверочной выборке"],"metadata":{"id":"DGWZC-IeNZRn"}},{"cell_type":"code","source":["model.val()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3mbSK_MFVDFc","executionInfo":{"status":"ok","timestamp":1680527344290,"user_tz":-180,"elapsed":6816,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"b4b0e69d-84cc-4526-fc91-fec99f6bf3f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 🚀 Python-3.9.16 torch-1.13.1+cu116 CUDA:0 (Tesla T4, 15102MiB)\n","Model summary (fused): 218 layers, 25842655 parameters, 0 gradients, 78.7 GFLOPs\n","\u001b[34m\u001b[1mval: \u001b[0mScanning /content/buildings-yolo/valid/labels.cache... 10 images, 0 backgrounds, 0 corrupt: 100%|██████████| 10/10 [00:00<?, ?it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 5/5 [00:02<00:00,  1.92it/s]\n","                   all         10        308      0.599      0.507      0.541       0.26\n","                   car         10        121      0.846      0.634      0.759      0.324\n","                garage         10         16      0.158      0.153      0.105     0.0716\n","                 house         10        119      0.781      0.897      0.888      0.536\n","                  pool         10         15      0.725      0.527      0.616      0.235\n","                  road         10         37      0.485      0.324      0.335      0.131\n","Speed: 1.3ms preprocess, 86.0ms inference, 0.0ms loss, 13.9ms postprocess per image\n","Results saved to \u001b[1mruns/detect/yolov83\u001b[0m\n"]},{"output_type":"execute_result","data":{"text/plain":["ultralytics.yolo.utils.metrics.DetMetrics object with attributes:\n","\n","ap_class_index: array([0, 1, 2, 3, 4])\n","box: ultralytics.yolo.utils.metrics.Metric object\n","confusion_matrix: <ultralytics.yolo.utils.metrics.ConfusionMatrix object at 0x7fd66e4c2970>\n","fitness: 0.2876338298019854\n","keys: ['metrics/precision(B)', 'metrics/recall(B)', 'metrics/mAP50(B)', 'metrics/mAP50-95(B)']\n","maps: array([    0.32358,     0.07158,     0.53585,     0.23533,     0.13122])\n","names: {0: 'car', 1: 'garage', 2: 'house', 3: 'pool', 4: 'road'}\n","plot: True\n","results_dict: {'metrics/precision(B)': 0.598722290851018, 'metrics/recall(B)': 0.5071056217100252, 'metrics/mAP50(B)': 0.5407298665589094, 'metrics/mAP50-95(B)': 0.25951204794010496, 'fitness': 0.2876338298019854}\n","save_dir: PosixPath('runs/detect/yolov83')\n","speed: {'preprocess': 1.3135910034179688, 'inference': 86.00473403930664, 'loss': 0.007176399230957031, 'postprocess': 13.943934440612793}"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# Сохранение обученной модели"],"metadata":{"id":"ArpxaoMdS9BQ"}},{"cell_type":"code","source":["# Все варианты сохранения модели:\n","# https://docs.ultralytics.com/modes/export/\n","\n","success = model.export(format=\"onnx\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4h-iyN73S_rp","executionInfo":{"status":"ok","timestamp":1680527374605,"user_tz":-180,"elapsed":16856,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"8a69eb08-0b03-4ddc-ac58-e76801ed9251"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 🚀 Python-3.9.16 torch-1.13.1+cu116 CPU\n","\n","\u001b[34m\u001b[1mPyTorch:\u001b[0m starting from runs/detect/yolov82/weights/best.pt with input shape (2, 3, 512, 512) BCHW and output shape(s) (2, 9, 5376) (49.6 MB)\n","\u001b[31m\u001b[1mrequirements:\u001b[0m YOLOv8 requirement \"onnx>=1.12.0\" not found, attempting AutoUpdate...\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting onnx>=1.12.0\n","  Downloading onnx-1.13.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\n","     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 13.5/13.5 MB 71.2 MB/s eta 0:00:00\n","Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (4.5.0)\n","Requirement already satisfied: protobuf<4,>=3.20.2 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (3.20.3)\n","Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (1.22.4)\n","Installing collected packages: onnx\n","Successfully installed onnx-1.13.1\n","\n","\u001b[31m\u001b[1mrequirements:\u001b[0m 1 package updated per ['onnx>=1.12.0']\n","\u001b[31m\u001b[1mrequirements:\u001b[0m ⚠️ \u001b[1mRestart runtime or rerun command for updates to take effect\u001b[0m\n","\n","\n","\u001b[34m\u001b[1mONNX:\u001b[0m starting export with onnx 1.13.1...\n","\u001b[34m\u001b[1mONNX:\u001b[0m export success ✅ 11.0s, saved as runs/detect/yolov82/weights/best.onnx (98.7 MB)\n","\n","Export complete (16.0s)\n","Results saved to \u001b[1m/content/runs/detect/yolov82/weights\u001b[0m\n","Predict:         yolo predict task=detect model=runs/detect/yolov82/weights/best.onnx imgsz=512 \n","Validate:        yolo val task=detect model=runs/detect/yolov82/weights/best.onnx imgsz=512 data=buildings-yolo/config.yaml \n","Visualize:       https://netron.app\n"]}]},{"cell_type":"code","source":["# Сохранение в формат Весов PyTorch. \n","# Они по умолчанию появляются в runs \n","# /content/runs/detect/yolov82/weights/best.pt "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rT99zOECVvLh","executionInfo":{"status":"ok","timestamp":1680529201817,"user_tz":-180,"elapsed":15110,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"c54cf422-519b-456f-e4c1-6223f9b9fd59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 🚀 Python-3.9.16 torch-1.13.1+cu116 CPU\n","\n","\u001b[34m\u001b[1mPyTorch:\u001b[0m starting from runs/detect/yolov82/weights/best.pt with input shape (2, 3, 512, 512) BCHW and output shape(s) (2, 9, 5376) (49.6 MB)\n","\n","\u001b[34m\u001b[1mTorchScript:\u001b[0m starting export with torch 1.13.1+cu116...\n","\u001b[34m\u001b[1mTorchScript:\u001b[0m export success ✅ 10.8s, saved as runs/detect/yolov82/weights/best.torchscript (99.1 MB)\n","\n","Export complete (14.2s)\n","Results saved to \u001b[1m/content/runs/detect/yolov82/weights\u001b[0m\n","Predict:         yolo predict task=detect model=runs/detect/yolov82/weights/best.torchscript imgsz=512 \n","Validate:        yolo val task=detect model=runs/detect/yolov82/weights/best.torchscript imgsz=512 data=buildings-yolo/config.yaml \n","Visualize:       https://netron.app\n"]}]},{"cell_type":"markdown","source":["#Работа модели в реальных условиях"],"metadata":{"id":"ayR4Ce6mPGrk"}},{"cell_type":"code","source":["from PIL import Image\n","import numpy as np\n","import cv2\n","from google.colab.patches import cv2_imshow # Чтобы можно было отрисовывать картинки из cv2 прямо в Colab"],"metadata":{"id":"iK-DBja-Sok_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Функции для отрисовки на изображении обводки объектов\n","\n","# Отрисовка обводки и названия\n","def box_label(image, box, label='', color=(128, 128, 128), txt_color=(255, 255, 255)):\n","  lw = max(round(sum(image.shape) / 2 * 0.003), 2)\n","  p1, p2 = (int(box[0]), int(box[1])), (int(box[2]), int(box[3]))\n","  cv2.rectangle(image, p1, p2, color, thickness=lw, lineType=cv2.LINE_AA)\n","  if label:\n","    tf = max(lw - 1, 1)  # font thickness\n","    w, h = cv2.getTextSize(label, 0, fontScale=lw / 3, thickness=tf)[0]\n","    outside = p1[1] - h >= 3\n","    p2 = p1[0] + w, p1[1] - h - 3 if outside else p1[1] + h + 3\n","    cv2.rectangle(image, p1, p2, color, -1, cv2.LINE_AA)  # filled\n","    cv2.putText(image,\n","                label, (p1[0], p1[1] - 2 if outside else p1[1] + h + 2),\n","                0,\n","                lw / 3,\n","                txt_color,\n","                thickness=tf,\n","                lineType=cv2.LINE_AA)\n","\n","\n","# Отрисовка всех боксов\n","def plot_bboxes(img, boxes, labels=[], colors=[], score=True, conf=None):\n","  image = img.copy()\n","  # Define COCO Labels\n","  if labels == []:\n","    labels = {0: u'__background__', 1: u'person', 2: u'bicycle',3: u'car', 4: u'motorcycle', 5: u'airplane', 6: u'bus', 7: u'train', 8: u'truck', 9: u'boat', 10: u'traffic light', 11: u'fire hydrant', 12: u'stop sign', 13: u'parking meter', 14: u'bench', 15: u'bird', 16: u'cat', 17: u'dog', 18: u'horse', 19: u'sheep', 20: u'cow', 21: u'elephant', 22: u'bear', 23: u'zebra', 24: u'giraffe', 25: u'backpack', 26: u'umbrella', 27: u'handbag', 28: u'tie', 29: u'suitcase', 30: u'frisbee', 31: u'skis', 32: u'snowboard', 33: u'sports ball', 34: u'kite', 35: u'baseball bat', 36: u'baseball glove', 37: u'skateboard', 38: u'surfboard', 39: u'tennis racket', 40: u'bottle', 41: u'wine glass', 42: u'cup', 43: u'fork', 44: u'knife', 45: u'spoon', 46: u'bowl', 47: u'banana', 48: u'apple', 49: u'sandwich', 50: u'orange', 51: u'broccoli', 52: u'carrot', 53: u'hot dog', 54: u'pizza', 55: u'donut', 56: u'cake', 57: u'chair', 58: u'couch', 59: u'potted plant', 60: u'bed', 61: u'dining table', 62: u'toilet', 63: u'tv', 64: u'laptop', 65: u'mouse', 66: u'remote', 67: u'keyboard', 68: u'cell phone', 69: u'microwave', 70: u'oven', 71: u'toaster', 72: u'sink', 73: u'refrigerator', 74: u'book', 75: u'clock', 76: u'vase', 77: u'scissors', 78: u'teddy bear', 79: u'hair drier', 80: u'toothbrush'}\n","  # Define colors\n","  if colors == []:\n","    #colors = [(6, 112, 83), (253, 246, 160), (40, 132, 70), (205, 97, 162), (149, 196, 30), (106, 19, 161), (127, 175, 225), (115, 133, 176), (83, 156, 8), (182, 29, 77), (180, 11, 251), (31, 12, 123), (23, 6, 115), (167, 34, 31), (176, 216, 69), (110, 229, 222), (72, 183, 159), (90, 168, 209), (195, 4, 209), (135, 236, 21), (62, 209, 199), (87, 1, 70), (75, 40, 168), (121, 90, 126), (11, 86, 86), (40, 218, 53), (234, 76, 20), (129, 174, 192), (13, 18, 254), (45, 183, 149), (77, 234, 120), (182, 83, 207), (172, 138, 252), (201, 7, 159), (147, 240, 17), (134, 19, 233), (202, 61, 206), (177, 253, 26), (10, 139, 17), (130, 148, 106), (174, 197, 128), (106, 59, 168), (124, 180, 83), (78, 169, 4), (26, 79, 176), (185, 149, 150), (165, 253, 206), (220, 87, 0), (72, 22, 226), (64, 174, 4), (245, 131, 96), (35, 217, 142), (89, 86, 32), (80, 56, 196), (222, 136, 159), (145, 6, 219), (143, 132, 162), (175, 97, 221), (72, 3, 79), (196, 184, 237), (18, 210, 116), (8, 185, 81), (99, 181, 254), (9, 127, 123), (140, 94, 215), (39, 229, 121), (230, 51, 96), (84, 225, 33), (218, 202, 139), (129, 223, 182), (167, 46, 157), (15, 252, 5), (128, 103, 203), (197, 223, 199), (19, 238, 181), (64, 142, 167), (12, 203, 242), (69, 21, 41), (177, 184, 2), (35, 97, 56), (241, 22, 161)]\n","    colors = [(89, 161, 197),(67, 161, 255),(19, 222, 24),(186, 55, 2),(167, 146, 11),(190, 76, 98),(130, 172, 179),(115, 209, 128),(204, 79, 135),(136, 126, 185),(209, 213, 45),(44, 52, 10),(101, 158, 121),(179, 124, 12),(25, 33, 189),(45, 115, 11),(73, 197, 184),(62, 225, 221),(32, 46, 52),(20, 165, 16),(54, 15, 57),(12, 150, 9),(10, 46, 99),(94, 89, 46),(48, 37, 106),(42, 10, 96),(7, 164, 128),(98, 213, 120),(40, 5, 219),(54, 25, 150),(251, 74, 172),(0, 236, 196),(21, 104, 190),(226, 74, 232),(120, 67, 25),(191, 106, 197),(8, 15, 134),(21, 2, 1),(142, 63, 109),(133, 148, 146),(187, 77, 253),(155, 22, 122),(218, 130, 77),(164, 102, 79),(43, 152, 125),(185, 124, 151),(95, 159, 238),(128, 89, 85),(228, 6, 60),(6, 41, 210),(11, 1, 133),(30, 96, 58),(230, 136, 109),(126, 45, 174),(164, 63, 165),(32, 111, 29),(232, 40, 70),(55, 31, 198),(148, 211, 129),(10, 186, 211),(181, 201, 94),(55, 35, 92),(129, 140, 233),(70, 250, 116),(61, 209, 152),(216, 21, 138),(100, 0, 176),(3, 42, 70),(151, 13, 44),(216, 102, 88),(125, 216, 93),(171, 236, 47),(253, 127, 103),(205, 137, 244),(193, 137, 224),(36, 152, 214),(17, 50, 238),(154, 165, 67),(114, 129, 60),(119, 24, 48),(73, 8, 110)]\n","  \n","  # Отрисовка каждого бокса\n","  for box in boxes:\n","    # Отрисовываем название блока если score=True\n","    if score :\n","      label = labels[int(box[-1])+1] + \" \" + str(round(100 * float(box[-2]),1)) + \"%\"\n","    else :\n","      label = labels[int(box[-1])+1]\n","    # Наносим только те боксы, которые больше, чем заданный уровень\n","    if conf :\n","      if box[-2] > conf:\n","        color = colors[int(box[-1])]\n","        box_label(image, box, label, color)\n","    else:\n","      color = colors[int(box[-1])]\n","      box_label(image, box, label, color)\n","\n","  # Отображение картинки\n","  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","  try:\n","    import google.colab\n","    IN_COLAB = True\n","  except:\n","    IN_COLAB = False\n","\n","  if IN_COLAB:\n","    cv2_imshow(image) # Если используем в Colab\n","  else :\n","    cv2.imshow(image) # Если используем в Python"],"metadata":{"id":"ogpAKzNiZMYm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["image = Image.open(\"/content/drive/MyDrive/Colab Notebooks/Computer_Vision/buildings_YOLO_test.jpg\")\n","image = np.asarray(image)\n","results = model.predict(image)\n","\n","print(results)"],"metadata":{"id":"atKpR89HSOqi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680527576802,"user_tz":-180,"elapsed":224,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"1a15035e-354f-4d15-c988-a46a6d080112"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\n","0: 288x512 2 cars, 26 houses, 8 roads, 103.3ms\n","Speed: 0.4ms preprocess, 103.3ms inference, 3.2ms postprocess per image at shape (1, 3, 512, 512)\n"]},{"output_type":"stream","name":"stdout","text":["[ultralytics.yolo.engine.results.Results object with attributes:\n","\n","_keys: ('boxes', 'masks', 'probs')\n","boxes: ultralytics.yolo.engine.results.Boxes object\n","keys: ['boxes']\n","masks: None\n","names: {0: 'car', 1: 'garage', 2: 'house', 3: 'pool', 4: 'road'}\n","orig_img: array([[[126, 141, 110],\n","        [125, 138, 110],\n","        [122, 134, 110],\n","        ...,\n","        [ 90, 116,  89],\n","        [ 93, 119,  94],\n","        [ 96, 121,  99]],\n","\n","       [[124, 139, 110],\n","        [123, 137, 111],\n","        [122, 134, 110],\n","        ...,\n","        [ 94, 119,  89],\n","        [ 95, 120,  91],\n","        [ 96, 120,  94]],\n","\n","       [[120, 134, 108],\n","        [120, 134, 109],\n","        [121, 133, 111],\n","        ...,\n","        [100, 124,  88],\n","        [ 99, 123,  89],\n","        [ 98, 122,  90]],\n","\n","       ...,\n","\n","       [[ 87,  88,  82],\n","        [ 89,  88,  86],\n","        [ 94,  89,  95],\n","        ...,\n","        [ 71,  52,  74],\n","        [ 71,  48,  77],\n","        [ 70,  46,  80]],\n","\n","       [[102, 103,  97],\n","        [ 92,  93,  88],\n","        [ 86,  86,  86],\n","        ...,\n","        [ 75,  55,  80],\n","        [ 76,  52,  84],\n","        [ 77,  53,  89]],\n","\n","       [[107, 108, 102],\n","        [ 91,  93,  88],\n","        [ 81,  83,  78],\n","        ...,\n","        [ 83,  63,  88],\n","        [ 83,  60,  89],\n","        [ 84,  60,  92]]], dtype=uint8)\n","orig_shape: (1150, 2048)\n","path: 'image0.jpg'\n","probs: None\n","speed: {'preprocess': 0.3933906555175781, 'inference': 103.3024787902832, 'postprocess': 3.1540393829345703}]\n"]}]},{"cell_type":"code","source":["print(results[0].boxes.boxes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vCOr_yrYYYqz","executionInfo":{"status":"ok","timestamp":1680527581521,"user_tz":-180,"elapsed":550,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"d8feeb86-a0d5-4996-fa8b-14dc54e326f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1.2249e+03, 3.8540e+02, 1.4275e+03, 5.2519e+02, 8.8627e-01, 2.0000e+00],\n","        [1.6317e+03, 3.3395e+02, 1.8361e+03, 4.7552e+02, 8.7359e-01, 2.0000e+00],\n","        [5.5489e+02, 4.4313e+02, 7.5312e+02, 5.9166e+02, 8.7349e-01, 2.0000e+00],\n","        [1.1190e+03, 8.0346e+02, 1.3216e+03, 9.6128e+02, 8.5587e-01, 2.0000e+00],\n","        [1.4389e+03, 3.4749e+02, 1.6303e+03, 5.0567e+02, 8.4752e-01, 2.0000e+00],\n","        [1.0133e+03, 3.9780e+02, 1.2090e+03, 5.5315e+02, 8.4714e-01, 2.0000e+00],\n","        [3.2742e+02, 4.6682e+02, 5.3652e+02, 6.1849e+02, 8.2687e-01, 2.0000e+00],\n","        [7.7870e+02, 3.9385e+02, 9.7868e+02, 5.7884e+02, 8.1816e-01, 2.0000e+00],\n","        [5.7741e+02, 8.5158e+02, 8.0760e+02, 1.0256e+03, 8.1526e-01, 2.0000e+00],\n","        [1.0443e+03, 1.1661e+02, 1.2186e+03, 2.5831e+02, 8.1339e-01, 2.0000e+00],\n","        [8.9728e+01, 4.7581e+02, 3.1754e+02, 6.2122e+02, 8.0849e-01, 2.0000e+00],\n","        [1.5621e+03, 5.9436e+01, 1.7457e+03, 1.9121e+02, 7.9326e-01, 2.0000e+00],\n","        [1.2422e+03, 6.4514e+01, 1.3988e+03, 2.1029e+02, 7.8864e-01, 2.0000e+00],\n","        [1.8921e+03, 4.7039e+01, 2.0476e+03, 1.7520e+02, 7.8735e-01, 2.0000e+00],\n","        [1.8427e+03, 3.1067e+02, 2.0430e+03, 4.4692e+02, 7.8011e-01, 2.0000e+00],\n","        [1.4601e+03, 7.9794e+02, 1.6869e+03, 9.4462e+02, 7.7877e-01, 2.0000e+00],\n","        [6.7893e+02, 9.4470e+01, 8.5017e+02, 2.5266e+02, 7.7758e-01, 2.0000e+00],\n","        [1.7470e+03, 5.4426e+01, 1.9060e+03, 1.7038e+02, 7.5970e-01, 2.0000e+00],\n","        [1.1351e+02, 1.9857e+02, 2.9514e+02, 3.2941e+02, 7.4811e-01, 2.0000e+00],\n","        [4.9596e+02, 1.3368e+02, 6.6351e+02, 2.6019e+02, 7.4232e-01, 2.0000e+00],\n","        [0.0000e+00, 2.1955e+02, 1.0217e+02, 3.2194e+02, 7.2537e-01, 2.0000e+00],\n","        [0.0000e+00, 6.8488e+02, 7.8602e+02, 8.6184e+02, 6.8276e-01, 4.0000e+00],\n","        [0.0000e+00, 9.0477e+02, 1.3017e+02, 1.1397e+03, 6.7768e-01, 2.0000e+00],\n","        [1.1882e+03, 1.0384e+03, 1.3654e+03, 1.1500e+03, 6.6368e-01, 2.0000e+00],\n","        [8.9445e+02, 7.0345e+02, 1.0449e+03, 1.1500e+03, 6.1944e-01, 4.0000e+00],\n","        [1.4734e+03, 6.2483e+01, 1.5601e+03, 1.8696e+02, 5.5807e-01, 2.0000e+00],\n","        [5.9425e+02, 6.0431e+02, 6.3479e+02, 6.7003e+02, 4.9709e-01, 0.0000e+00],\n","        [1.8189e+03, 7.4912e+02, 1.9983e+03, 9.0883e+02, 4.3838e-01, 2.0000e+00],\n","        [0.0000e+00, 1.8347e+01, 7.8407e+02, 1.5768e+02, 4.3761e-01, 4.0000e+00],\n","        [2.9341e+02, 1.6207e+02, 4.3609e+02, 2.5036e+02, 3.9481e-01, 2.0000e+00],\n","        [2.0486e+00, 1.5512e+00, 2.0480e+03, 1.4122e+02, 3.5861e-01, 4.0000e+00],\n","        [0.0000e+00, 5.8799e+02, 2.0465e+03, 8.1485e+02, 3.3885e-01, 4.0000e+00],\n","        [0.0000e+00, 5.4460e+02, 2.0464e+03, 7.6974e+02, 3.2418e-01, 4.0000e+00],\n","        [5.9885e+02, 6.0520e+02, 6.3737e+02, 6.8329e+02, 3.0019e-01, 0.0000e+00],\n","        [0.0000e+00, 7.3614e+02, 3.2394e+02, 8.7465e+02, 2.8723e-01, 4.0000e+00],\n","        [0.0000e+00, 6.9727e+02, 5.3294e+02, 8.7273e+02, 2.8258e-01, 4.0000e+00]], device='cuda:0')\n"]}]},{"cell_type":"code","source":["plot_bboxes(image, results[0].boxes.boxes, labels={0: u\"backgroubd\", 1: u\"car\", 2: u\"garage\", 3: \"house\", 4: u\"pool\", 5: \"road\",}, score=False, conf=0.1)"],"metadata":{"id":"LarO3wlLYI9u","colab":{"base_uri":"https://localhost:8080/","height":614,"output_embedded_package_id":"1Pco_DFxI94vfHf5DJd_4KbYoYv82gVmj"},"executionInfo":{"status":"ok","timestamp":1680527795058,"user_tz":-180,"elapsed":3191,"user":{"displayName":"Глеб Колонин","userId":"16800121630135430864"}},"outputId":"a7d7b488-61d1-4d57-a212-118f5cf5b615"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["# Использование командной строки\n","# Используем режим mode=predict для работы в режиме предсказания\n","# В данным случае пример того, как можно найти дырки на видео\n","!yolo task=detect mode=predict model=runs/detect/yolov85/weights/best.pt source=video_1.mp4 show=True imgsz=640 name=yolov8 hide_labels=True"],"metadata":{"id":"L_PGvx0QPdN2"},"execution_count":null,"outputs":[]}]}