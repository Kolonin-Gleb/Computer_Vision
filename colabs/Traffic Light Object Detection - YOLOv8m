{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1uU-j3o4NcdnC6YTL4WF9y3IhxG9ohvGN","timestamp":1680523671389}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"markdown","source":["–ë—ã–ª –≤–∑—è—Ç –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç YOLO   \n","https://ithub.bulgakov.app/lessons/58869   \n","https://colab.research.google.com/drive/1k_qEN6eKyO2DDnj99SuUWuTQ8kKx4GWG?usp=sharing   \n","\n","–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ   \n","https://ithub.bulgakov.app/lessons/49427   \n"],"metadata":{"id":"BfFyD1O8LSbg"}},{"cell_type":"markdown","source":["## –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è YOLO"],"metadata":{"id":"fLe8XfFTCPSj"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ll2x9It4B8b9","executionInfo":{"status":"ok","timestamp":1682877283798,"user_tz":-180,"elapsed":20735,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"ef45a4f1-305c-4022-f6a9-8cda6ab42579"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥ YOLO\n","!unzip -q /content/drive/MyDrive/Colab\\ Notebooks/Machine_learning/Datasets/traffic_light.zip -d /content/"],"metadata":{"id":"tVbH-CDxC3YZ","executionInfo":{"status":"ok","timestamp":1682877310721,"user_tz":-180,"elapsed":26927,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# –î–æ—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ YOLO –¥–∞—Ç–∞—Å–µ—Ç–∞\n","# 1) –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä—É–∫–∞–º–∏ –ø–∞–ø–∫—É valid –≤ val\n","# 2) –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–∞–ø–∫—É traffic_light —Ñ–∞–π–ª—ã classes.txt –∏ config.yaml - –ª–µ–∂–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ"],"metadata":{"id":"fFzLbp-tQJJ6","executionInfo":{"status":"ok","timestamp":1682877354592,"user_tz":-180,"elapsed":424,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# –£—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç ultralytics - –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞–¥ YOLO –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ñ—É–∫–Ω—Ü–∏–∏\n","!pip -q install ultralytics\n","\n","# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç –ø–∞–∫–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è\n","#!pip install clearml"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m_ryu7lHHeeB","executionInfo":{"status":"ok","timestamp":1682877362998,"user_tz":-180,"elapsed":6624,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"f500e77f-8d08-47b0-ac0a-96c46ee5ec18"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m562.2/562.2 kB\u001b[0m \u001b[31m13.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m201.7/201.7 kB\u001b[0m \u001b[31m21.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"code","source":["from ultralytics import YOLO "],"metadata":{"id":"aDWuHDMMJSwj","executionInfo":{"status":"ok","timestamp":1682877369270,"user_tz":-180,"elapsed":6276,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è YOLO –ù–°\n","!mkdir -p datasets \n","!ln -s /content/traffic_light /content/datasets/traffic_light"],"metadata":{"id":"yN1qBTIaMUA7","executionInfo":{"status":"ok","timestamp":1682877369271,"user_tz":-180,"elapsed":13,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"],"metadata":{"id":"-CasqWYdNWC-"}},{"cell_type":"code","source":["# –ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è –≤—ã–π–¥–µ—Ç –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–Ω—É—é vaild –Ω–∞ val –≤ config.yaml "],"metadata":{"id":"BMx58M3GMHcE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å YOLOv8 Medium\n","model = YOLO('yolov8m.pt')\n","\n","# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏\n","results = model.train(\n","  task='detect',           # –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: detect - –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, segment - —Å–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è, classify - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n","  data='traffic_light/config.yaml', # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ \n","  imgsz=800,               # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ 800*800. –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ\n","  epochs=10,               # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö\n","  batch=2,                 # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–∞—Ç—á–∞)\n","  name='yolov8')           # –ò–º—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hyfoDDwgJUcS","outputId":"befd7df7-e54d-47f5-ad87-d4c40ea203ba","executionInfo":{"status":"error","timestamp":1682877445658,"user_tz":-180,"elapsed":73700,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}}},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8m.pt to yolov8m.pt...\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 49.7M/49.7M [00:00<00:00, 74.4MB/s]\n","Ultralytics YOLOv8.0.90 üöÄ Python-3.10.11 torch-2.0.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n","\u001b[34m\u001b[1myolo/engine/trainer: \u001b[0mtask=detect, mode=train, model=yolov8m.pt, data=traffic_light/config.yaml, epochs=10, patience=50, batch=2, imgsz=800, save=True, save_period=-1, cache=False, device=None, workers=8, project=None, name=yolov8, exist_ok=False, pretrained=False, optimizer=SGD, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=0, resume=False, amp=True, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, show=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, vid_stride=1, line_thickness=3, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, boxes=True, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, mosaic=1.0, mixup=0.0, copy_paste=0.0, cfg=None, v5loader=False, tracker=botsort.yaml, save_dir=runs/detect/yolov8\n","Downloading https://ultralytics.com/assets/Arial.ttf to /root/.config/Ultralytics/Arial.ttf...\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 755k/755k [00:00<00:00, 22.6MB/s]\n","Overriding model.yaml nc=80 with nc=3\n","\n","                   from  n    params  module                                       arguments                     \n","  0                  -1  1      1392  ultralytics.nn.modules.Conv                  [3, 48, 3, 2]                 \n","  1                  -1  1     41664  ultralytics.nn.modules.Conv                  [48, 96, 3, 2]                \n","  2                  -1  2    111360  ultralytics.nn.modules.C2f                   [96, 96, 2, True]             \n","  3                  -1  1    166272  ultralytics.nn.modules.Conv                  [96, 192, 3, 2]               \n","  4                  -1  4    813312  ultralytics.nn.modules.C2f                   [192, 192, 4, True]           \n","  5                  -1  1    664320  ultralytics.nn.modules.Conv                  [192, 384, 3, 2]              \n","  6                  -1  4   3248640  ultralytics.nn.modules.C2f                   [384, 384, 4, True]           \n","  7                  -1  1   1991808  ultralytics.nn.modules.Conv                  [384, 576, 3, 2]              \n","  8                  -1  2   3985920  ultralytics.nn.modules.C2f                   [576, 576, 2, True]           \n","  9                  -1  1    831168  ultralytics.nn.modules.SPPF                  [576, 576, 5]                 \n"," 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n"," 11             [-1, 6]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 12                  -1  2   1993728  ultralytics.nn.modules.C2f                   [960, 384, 2]                 \n"," 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n"," 14             [-1, 4]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 15                  -1  2    517632  ultralytics.nn.modules.C2f                   [576, 192, 2]                 \n"," 16                  -1  1    332160  ultralytics.nn.modules.Conv                  [192, 192, 3, 2]              \n"," 17            [-1, 12]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 18                  -1  2   1846272  ultralytics.nn.modules.C2f                   [576, 384, 2]                 \n"," 19                  -1  1   1327872  ultralytics.nn.modules.Conv                  [384, 384, 3, 2]              \n"," 20             [-1, 9]  1         0  ultralytics.nn.modules.Concat                [1]                           \n"," 21                  -1  2   4207104  ultralytics.nn.modules.C2f                   [960, 576, 2]                 \n"," 22        [15, 18, 21]  1   3777433  ultralytics.nn.modules.Detect                [3, [192, 384, 576]]          \n","Model summary: 295 layers, 25858057 parameters, 25858041 gradients, 79.1 GFLOPs\n","\n","Transferred 469/475 items from pretrained weights\n","\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/detect/yolov8', view at http://localhost:6006/\n","\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks with YOLOv8n...\n","Downloading https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt to yolov8n.pt...\n","100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 6.23M/6.23M [00:00<00:00, 94.2MB/s]\n","\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ‚úÖ\n","\u001b[34m\u001b[1moptimizer:\u001b[0m SGD(lr=0.01) with parameter groups 77 weight(decay=0.0), 84 weight(decay=0.0005), 83 bias\n","\u001b[34m\u001b[1mtrain: \u001b[0mScanning /content/traffic_light/train/labels... 23360 images, 5867 backgrounds, 0 corrupt: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 29227/29227 [00:19<00:00, 1520.81it/s]\n","\u001b[34m\u001b[1mtrain: \u001b[0mNew cache created: /content/traffic_light/train/labels.cache\n","\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01), CLAHE(p=0.01, clip_limit=(1, 4.0), tile_grid_size=(8, 8))\n","\u001b[34m\u001b[1mval: \u001b[0mScanning /content/traffic_light/val/labels... 1440 images, 5867 backgrounds, 0 corrupt: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 7307/7307 [00:12<00:00, 607.35it/s]\n","\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /content/traffic_light/val/labels.cache\n","Plotting labels to runs/detect/yolov8/labels.jpg... \n","Image sizes 800 train, 800 val\n","Using 2 dataloader workers\n","Logging results to \u001b[1mruns/detect/yolov8\u001b[0m\n","Starting training for 10 epochs...\n","\n","      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","       1/10      1.71G      3.105      11.73      3.055          9        800:   0%|          | 17/14614 [00:04<1:09:39,  3.49it/s]\n"]},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-84237812d79b>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m results = model.train(\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0mtask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'detect'\u001b[0m\u001b[0;34m,\u001b[0m           \u001b[0;31m# –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: detect - –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, segment - —Å–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è, classify - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'traffic_light/config.yaml'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;31m# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/engine/model.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    368\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhub_session\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m  \u001b[0;31m# attach optional HUB session\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 370\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    371\u001b[0m         \u001b[0;31m# Update model and cfg after training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    372\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mRANK\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/engine/trainer.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    189\u001b[0m                 \u001b[0mddp_cleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_train\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mworld_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_setup_ddp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mworld_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/engine/trainer.py\u001b[0m in \u001b[0;36m_do_train\u001b[0;34m(self, world_size)\u001b[0m\n\u001b[1;32m    322\u001b[0m                     \u001b[0mbatch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocess_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m                     \u001b[0mpreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'img'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss_items\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mRANK\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloss\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mworld_size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/v8/detect/train.py\u001b[0m in \u001b[0;36mcriterion\u001b[0;34m(self, preds, batch)\u001b[0m\n\u001b[1;32m     97\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'compute_loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLoss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mde_parallel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 99\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpreds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mlabel_loss_items\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_items\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprefix\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/v8/detect/train.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, preds, batch)\u001b[0m\n\u001b[1;32m    209\u001b[0m         \u001b[0mpred_bboxes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbbox_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manchor_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred_distri\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# xyxy, (b, h*w, 4)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m         _, target_bboxes, target_scores, fg_mask, _ = self.assigner(\n\u001b[0m\u001b[1;32m    212\u001b[0m             \u001b[0mpred_scores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msigmoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mpred_bboxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mstride_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgt_bboxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m             anchor_points * stride_tensor, gt_labels, gt_bboxes, mask_gt)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/utils/_contextlib.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mctx_factory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/utils/tal.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, pd_scores, pd_bboxes, anc_points, gt_labels, gt_bboxes, mask_gt)\u001b[0m\n\u001b[1;32m    109\u001b[0m                     torch.zeros_like(pd_scores[..., 0]).to(device))\n\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 111\u001b[0;31m         mask_pos, align_metric, overlaps = self.get_pos_mask(pd_scores, pd_bboxes, gt_labels, gt_bboxes, anc_points,\n\u001b[0m\u001b[1;32m    112\u001b[0m                                                              mask_gt)\n\u001b[1;32m    113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/utils/tal.py\u001b[0m in \u001b[0;36mget_pos_mask\u001b[0;34m(self, pd_scores, pd_bboxes, gt_labels, gt_bboxes, anc_points, mask_gt)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0mmask_in_gts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselect_candidates_in_gts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manc_points\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgt_bboxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m         \u001b[0;31m# Get anchor_align metric, (b, max_num_obj, h*w)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m         \u001b[0malign_metric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverlaps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_box_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd_scores\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpd_bboxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgt_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgt_bboxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask_in_gts\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mmask_gt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Get topk_metric mask, (b, max_num_obj, h*w)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0mmask_topk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect_topk_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malign_metric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtopk_mask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask_gt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtopk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ultralytics/yolo/utils/tal.py\u001b[0m in \u001b[0;36mget_box_metrics\u001b[0;34m(self, pd_scores, pd_bboxes, gt_labels, gt_bboxes, mask_gt)\u001b[0m\n\u001b[1;32m    149\u001b[0m         \u001b[0mind\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgt_labels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# b, max_num_obj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m         \u001b[0;31m# Get the scores of each grid for each gt cls\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m         \u001b[0mbbox_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask_gt\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd_scores\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mind\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask_gt\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# b, max_num_obj, h*w\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m         \u001b[0;31m# (b, max_num_obj, 1, 4), (b, 1, h*w, 4)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n"]}]},{"cell_type":"markdown","source":["#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ"],"metadata":{"id":"DGWZC-IeNZRn"}},{"cell_type":"code","source":["model.val()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3mbSK_MFVDFc","executionInfo":{"status":"ok","timestamp":1680527344290,"user_tz":-180,"elapsed":6816,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"b4b0e69d-84cc-4526-fc91-fec99f6bf3f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 üöÄ Python-3.9.16 torch-1.13.1+cu116 CUDA:0 (Tesla T4, 15102MiB)\n","Model summary (fused): 218 layers, 25842655 parameters, 0 gradients, 78.7 GFLOPs\n","\u001b[34m\u001b[1mval: \u001b[0mScanning /content/buildings-yolo/valid/labels.cache... 10 images, 0 backgrounds, 0 corrupt: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 10/10 [00:00<?, ?it/s]\n","                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 5/5 [00:02<00:00,  1.92it/s]\n","                   all         10        308      0.599      0.507      0.541       0.26\n","                   car         10        121      0.846      0.634      0.759      0.324\n","                garage         10         16      0.158      0.153      0.105     0.0716\n","                 house         10        119      0.781      0.897      0.888      0.536\n","                  pool         10         15      0.725      0.527      0.616      0.235\n","                  road         10         37      0.485      0.324      0.335      0.131\n","Speed: 1.3ms preprocess, 86.0ms inference, 0.0ms loss, 13.9ms postprocess per image\n","Results saved to \u001b[1mruns/detect/yolov83\u001b[0m\n"]},{"output_type":"execute_result","data":{"text/plain":["ultralytics.yolo.utils.metrics.DetMetrics object with attributes:\n","\n","ap_class_index: array([0, 1, 2, 3, 4])\n","box: ultralytics.yolo.utils.metrics.Metric object\n","confusion_matrix: <ultralytics.yolo.utils.metrics.ConfusionMatrix object at 0x7fd66e4c2970>\n","fitness: 0.2876338298019854\n","keys: ['metrics/precision(B)', 'metrics/recall(B)', 'metrics/mAP50(B)', 'metrics/mAP50-95(B)']\n","maps: array([    0.32358,     0.07158,     0.53585,     0.23533,     0.13122])\n","names: {0: 'car', 1: 'garage', 2: 'house', 3: 'pool', 4: 'road'}\n","plot: True\n","results_dict: {'metrics/precision(B)': 0.598722290851018, 'metrics/recall(B)': 0.5071056217100252, 'metrics/mAP50(B)': 0.5407298665589094, 'metrics/mAP50-95(B)': 0.25951204794010496, 'fitness': 0.2876338298019854}\n","save_dir: PosixPath('runs/detect/yolov83')\n","speed: {'preprocess': 1.3135910034179688, 'inference': 86.00473403930664, 'loss': 0.007176399230957031, 'postprocess': 13.943934440612793}"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"],"metadata":{"id":"ArpxaoMdS9BQ"}},{"cell_type":"code","source":["# –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:\n","# https://docs.ultralytics.com/modes/export/\n","\n","success = model.export(format=\"onnx\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4h-iyN73S_rp","executionInfo":{"status":"ok","timestamp":1680527374605,"user_tz":-180,"elapsed":16856,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"8a69eb08-0b03-4ddc-ac58-e76801ed9251"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 üöÄ Python-3.9.16 torch-1.13.1+cu116 CPU\n","\n","\u001b[34m\u001b[1mPyTorch:\u001b[0m starting from runs/detect/yolov82/weights/best.pt with input shape (2, 3, 512, 512) BCHW and output shape(s) (2, 9, 5376) (49.6 MB)\n","\u001b[31m\u001b[1mrequirements:\u001b[0m YOLOv8 requirement \"onnx>=1.12.0\" not found, attempting AutoUpdate...\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting onnx>=1.12.0\n","  Downloading onnx-1.13.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\n","     ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 13.5/13.5 MB 71.2 MB/s eta 0:00:00\n","Requirement already satisfied: typing-extensions>=3.6.2.1 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (4.5.0)\n","Requirement already satisfied: protobuf<4,>=3.20.2 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (3.20.3)\n","Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.9/dist-packages (from onnx>=1.12.0) (1.22.4)\n","Installing collected packages: onnx\n","Successfully installed onnx-1.13.1\n","\n","\u001b[31m\u001b[1mrequirements:\u001b[0m 1 package updated per ['onnx>=1.12.0']\n","\u001b[31m\u001b[1mrequirements:\u001b[0m ‚ö†Ô∏è \u001b[1mRestart runtime or rerun command for updates to take effect\u001b[0m\n","\n","\n","\u001b[34m\u001b[1mONNX:\u001b[0m starting export with onnx 1.13.1...\n","\u001b[34m\u001b[1mONNX:\u001b[0m export success ‚úÖ 11.0s, saved as runs/detect/yolov82/weights/best.onnx (98.7 MB)\n","\n","Export complete (16.0s)\n","Results saved to \u001b[1m/content/runs/detect/yolov82/weights\u001b[0m\n","Predict:         yolo predict task=detect model=runs/detect/yolov82/weights/best.onnx imgsz=512 \n","Validate:        yolo val task=detect model=runs/detect/yolov82/weights/best.onnx imgsz=512 data=buildings-yolo/config.yaml \n","Visualize:       https://netron.app\n"]}]},{"cell_type":"code","source":["# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –í–µ—Å–æ–≤ PyTorch. \n","# –û–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ runs \n","# /content/runs/detect/yolov82/weights/best.pt "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rT99zOECVvLh","executionInfo":{"status":"ok","timestamp":1680529201817,"user_tz":-180,"elapsed":15110,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"c54cf422-519b-456f-e4c1-6223f9b9fd59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Ultralytics YOLOv8.0.61 üöÄ Python-3.9.16 torch-1.13.1+cu116 CPU\n","\n","\u001b[34m\u001b[1mPyTorch:\u001b[0m starting from runs/detect/yolov82/weights/best.pt with input shape (2, 3, 512, 512) BCHW and output shape(s) (2, 9, 5376) (49.6 MB)\n","\n","\u001b[34m\u001b[1mTorchScript:\u001b[0m starting export with torch 1.13.1+cu116...\n","\u001b[34m\u001b[1mTorchScript:\u001b[0m export success ‚úÖ 10.8s, saved as runs/detect/yolov82/weights/best.torchscript (99.1 MB)\n","\n","Export complete (14.2s)\n","Results saved to \u001b[1m/content/runs/detect/yolov82/weights\u001b[0m\n","Predict:         yolo predict task=detect model=runs/detect/yolov82/weights/best.torchscript imgsz=512 \n","Validate:        yolo val task=detect model=runs/detect/yolov82/weights/best.torchscript imgsz=512 data=buildings-yolo/config.yaml \n","Visualize:       https://netron.app\n"]}]},{"cell_type":"markdown","source":["#–†–∞–±–æ—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"],"metadata":{"id":"ayR4Ce6mPGrk"}},{"cell_type":"code","source":["from PIL import Image\n","import numpy as np\n","import cv2\n","from google.colab.patches import cv2_imshow # –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ cv2 –ø—Ä—è–º–æ –≤ Colab"],"metadata":{"id":"iK-DBja-Sok_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–≤–æ–¥–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤\n","\n","# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–≤–æ–¥–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è\n","def box_label(image, box, label='', color=(128, 128, 128), txt_color=(255, 255, 255)):\n","  lw = max(round(sum(image.shape) / 2 * 0.003), 2)\n","  p1, p2 = (int(box[0]), int(box[1])), (int(box[2]), int(box[3]))\n","  cv2.rectangle(image, p1, p2, color, thickness=lw, lineType=cv2.LINE_AA)\n","  if label:\n","    tf = max(lw - 1, 1)  # font thickness\n","    w, h = cv2.getTextSize(label, 0, fontScale=lw / 3, thickness=tf)[0]\n","    outside = p1[1] - h >= 3\n","    p2 = p1[0] + w, p1[1] - h - 3 if outside else p1[1] + h + 3\n","    cv2.rectangle(image, p1, p2, color, -1, cv2.LINE_AA)  # filled\n","    cv2.putText(image,\n","                label, (p1[0], p1[1] - 2 if outside else p1[1] + h + 2),\n","                0,\n","                lw / 3,\n","                txt_color,\n","                thickness=tf,\n","                lineType=cv2.LINE_AA)\n","\n","\n","# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ–∫—Å–æ–≤\n","def plot_bboxes(img, boxes, labels=[], colors=[], score=True, conf=None):\n","  image = img.copy()\n","  # Define COCO Labels\n","  if labels == []:\n","    labels = {0: u'__background__', 1: u'person', 2: u'bicycle',3: u'car', 4: u'motorcycle', 5: u'airplane', 6: u'bus', 7: u'train', 8: u'truck', 9: u'boat', 10: u'traffic light', 11: u'fire hydrant', 12: u'stop sign', 13: u'parking meter', 14: u'bench', 15: u'bird', 16: u'cat', 17: u'dog', 18: u'horse', 19: u'sheep', 20: u'cow', 21: u'elephant', 22: u'bear', 23: u'zebra', 24: u'giraffe', 25: u'backpack', 26: u'umbrella', 27: u'handbag', 28: u'tie', 29: u'suitcase', 30: u'frisbee', 31: u'skis', 32: u'snowboard', 33: u'sports ball', 34: u'kite', 35: u'baseball bat', 36: u'baseball glove', 37: u'skateboard', 38: u'surfboard', 39: u'tennis racket', 40: u'bottle', 41: u'wine glass', 42: u'cup', 43: u'fork', 44: u'knife', 45: u'spoon', 46: u'bowl', 47: u'banana', 48: u'apple', 49: u'sandwich', 50: u'orange', 51: u'broccoli', 52: u'carrot', 53: u'hot dog', 54: u'pizza', 55: u'donut', 56: u'cake', 57: u'chair', 58: u'couch', 59: u'potted plant', 60: u'bed', 61: u'dining table', 62: u'toilet', 63: u'tv', 64: u'laptop', 65: u'mouse', 66: u'remote', 67: u'keyboard', 68: u'cell phone', 69: u'microwave', 70: u'oven', 71: u'toaster', 72: u'sink', 73: u'refrigerator', 74: u'book', 75: u'clock', 76: u'vase', 77: u'scissors', 78: u'teddy bear', 79: u'hair drier', 80: u'toothbrush'}\n","  # Define colors\n","  if colors == []:\n","    #colors = [(6, 112, 83), (253, 246, 160), (40, 132, 70), (205, 97, 162), (149, 196, 30), (106, 19, 161), (127, 175, 225), (115, 133, 176), (83, 156, 8), (182, 29, 77), (180, 11, 251), (31, 12, 123), (23, 6, 115), (167, 34, 31), (176, 216, 69), (110, 229, 222), (72, 183, 159), (90, 168, 209), (195, 4, 209), (135, 236, 21), (62, 209, 199), (87, 1, 70), (75, 40, 168), (121, 90, 126), (11, 86, 86), (40, 218, 53), (234, 76, 20), (129, 174, 192), (13, 18, 254), (45, 183, 149), (77, 234, 120), (182, 83, 207), (172, 138, 252), (201, 7, 159), (147, 240, 17), (134, 19, 233), (202, 61, 206), (177, 253, 26), (10, 139, 17), (130, 148, 106), (174, 197, 128), (106, 59, 168), (124, 180, 83), (78, 169, 4), (26, 79, 176), (185, 149, 150), (165, 253, 206), (220, 87, 0), (72, 22, 226), (64, 174, 4), (245, 131, 96), (35, 217, 142), (89, 86, 32), (80, 56, 196), (222, 136, 159), (145, 6, 219), (143, 132, 162), (175, 97, 221), (72, 3, 79), (196, 184, 237), (18, 210, 116), (8, 185, 81), (99, 181, 254), (9, 127, 123), (140, 94, 215), (39, 229, 121), (230, 51, 96), (84, 225, 33), (218, 202, 139), (129, 223, 182), (167, 46, 157), (15, 252, 5), (128, 103, 203), (197, 223, 199), (19, 238, 181), (64, 142, 167), (12, 203, 242), (69, 21, 41), (177, 184, 2), (35, 97, 56), (241, 22, 161)]\n","    colors = [(89, 161, 197),(67, 161, 255),(19, 222, 24),(186, 55, 2),(167, 146, 11),(190, 76, 98),(130, 172, 179),(115, 209, 128),(204, 79, 135),(136, 126, 185),(209, 213, 45),(44, 52, 10),(101, 158, 121),(179, 124, 12),(25, 33, 189),(45, 115, 11),(73, 197, 184),(62, 225, 221),(32, 46, 52),(20, 165, 16),(54, 15, 57),(12, 150, 9),(10, 46, 99),(94, 89, 46),(48, 37, 106),(42, 10, 96),(7, 164, 128),(98, 213, 120),(40, 5, 219),(54, 25, 150),(251, 74, 172),(0, 236, 196),(21, 104, 190),(226, 74, 232),(120, 67, 25),(191, 106, 197),(8, 15, 134),(21, 2, 1),(142, 63, 109),(133, 148, 146),(187, 77, 253),(155, 22, 122),(218, 130, 77),(164, 102, 79),(43, 152, 125),(185, 124, 151),(95, 159, 238),(128, 89, 85),(228, 6, 60),(6, 41, 210),(11, 1, 133),(30, 96, 58),(230, 136, 109),(126, 45, 174),(164, 63, 165),(32, 111, 29),(232, 40, 70),(55, 31, 198),(148, 211, 129),(10, 186, 211),(181, 201, 94),(55, 35, 92),(129, 140, 233),(70, 250, 116),(61, 209, 152),(216, 21, 138),(100, 0, 176),(3, 42, 70),(151, 13, 44),(216, 102, 88),(125, 216, 93),(171, 236, 47),(253, 127, 103),(205, 137, 244),(193, 137, 224),(36, 152, 214),(17, 50, 238),(154, 165, 67),(114, 129, 60),(119, 24, 48),(73, 8, 110)]\n","  \n","  # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–æ–∫—Å–∞\n","  for box in boxes:\n","    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –µ—Å–ª–∏ score=True\n","    if score :\n","      label = labels[int(box[-1])+1] + \" \" + str(round(100 * float(box[-2]),1)) + \"%\"\n","    else :\n","      label = labels[int(box[-1])+1]\n","    # –ù–∞–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–æ–∫—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n","    if conf :\n","      if box[-2] > conf:\n","        color = colors[int(box[-1])]\n","        box_label(image, box, label, color)\n","    else:\n","      color = colors[int(box[-1])]\n","      box_label(image, box, label, color)\n","\n","  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n","  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","  try:\n","    import google.colab\n","    IN_COLAB = True\n","  except:\n","    IN_COLAB = False\n","\n","  if IN_COLAB:\n","    cv2_imshow(image) # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ Colab\n","  else :\n","    cv2.imshow(image) # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ Python"],"metadata":{"id":"ogpAKzNiZMYm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["image = Image.open(\"/content/drive/MyDrive/Colab Notebooks/Computer_Vision/buildings_YOLO_test.jpg\")\n","image = np.asarray(image)\n","results = model.predict(image)\n","\n","print(results)"],"metadata":{"id":"atKpR89HSOqi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680527576802,"user_tz":-180,"elapsed":224,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"1a15035e-354f-4d15-c988-a46a6d080112"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\n","0: 288x512 2 cars, 26 houses, 8 roads, 103.3ms\n","Speed: 0.4ms preprocess, 103.3ms inference, 3.2ms postprocess per image at shape (1, 3, 512, 512)\n"]},{"output_type":"stream","name":"stdout","text":["[ultralytics.yolo.engine.results.Results object with attributes:\n","\n","_keys: ('boxes', 'masks', 'probs')\n","boxes: ultralytics.yolo.engine.results.Boxes object\n","keys: ['boxes']\n","masks: None\n","names: {0: 'car', 1: 'garage', 2: 'house', 3: 'pool', 4: 'road'}\n","orig_img: array([[[126, 141, 110],\n","        [125, 138, 110],\n","        [122, 134, 110],\n","        ...,\n","        [ 90, 116,  89],\n","        [ 93, 119,  94],\n","        [ 96, 121,  99]],\n","\n","       [[124, 139, 110],\n","        [123, 137, 111],\n","        [122, 134, 110],\n","        ...,\n","        [ 94, 119,  89],\n","        [ 95, 120,  91],\n","        [ 96, 120,  94]],\n","\n","       [[120, 134, 108],\n","        [120, 134, 109],\n","        [121, 133, 111],\n","        ...,\n","        [100, 124,  88],\n","        [ 99, 123,  89],\n","        [ 98, 122,  90]],\n","\n","       ...,\n","\n","       [[ 87,  88,  82],\n","        [ 89,  88,  86],\n","        [ 94,  89,  95],\n","        ...,\n","        [ 71,  52,  74],\n","        [ 71,  48,  77],\n","        [ 70,  46,  80]],\n","\n","       [[102, 103,  97],\n","        [ 92,  93,  88],\n","        [ 86,  86,  86],\n","        ...,\n","        [ 75,  55,  80],\n","        [ 76,  52,  84],\n","        [ 77,  53,  89]],\n","\n","       [[107, 108, 102],\n","        [ 91,  93,  88],\n","        [ 81,  83,  78],\n","        ...,\n","        [ 83,  63,  88],\n","        [ 83,  60,  89],\n","        [ 84,  60,  92]]], dtype=uint8)\n","orig_shape: (1150, 2048)\n","path: 'image0.jpg'\n","probs: None\n","speed: {'preprocess': 0.3933906555175781, 'inference': 103.3024787902832, 'postprocess': 3.1540393829345703}]\n"]}]},{"cell_type":"code","source":["print(results[0].boxes.boxes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vCOr_yrYYYqz","executionInfo":{"status":"ok","timestamp":1680527581521,"user_tz":-180,"elapsed":550,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"d8feeb86-a0d5-4996-fa8b-14dc54e326f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[1.2249e+03, 3.8540e+02, 1.4275e+03, 5.2519e+02, 8.8627e-01, 2.0000e+00],\n","        [1.6317e+03, 3.3395e+02, 1.8361e+03, 4.7552e+02, 8.7359e-01, 2.0000e+00],\n","        [5.5489e+02, 4.4313e+02, 7.5312e+02, 5.9166e+02, 8.7349e-01, 2.0000e+00],\n","        [1.1190e+03, 8.0346e+02, 1.3216e+03, 9.6128e+02, 8.5587e-01, 2.0000e+00],\n","        [1.4389e+03, 3.4749e+02, 1.6303e+03, 5.0567e+02, 8.4752e-01, 2.0000e+00],\n","        [1.0133e+03, 3.9780e+02, 1.2090e+03, 5.5315e+02, 8.4714e-01, 2.0000e+00],\n","        [3.2742e+02, 4.6682e+02, 5.3652e+02, 6.1849e+02, 8.2687e-01, 2.0000e+00],\n","        [7.7870e+02, 3.9385e+02, 9.7868e+02, 5.7884e+02, 8.1816e-01, 2.0000e+00],\n","        [5.7741e+02, 8.5158e+02, 8.0760e+02, 1.0256e+03, 8.1526e-01, 2.0000e+00],\n","        [1.0443e+03, 1.1661e+02, 1.2186e+03, 2.5831e+02, 8.1339e-01, 2.0000e+00],\n","        [8.9728e+01, 4.7581e+02, 3.1754e+02, 6.2122e+02, 8.0849e-01, 2.0000e+00],\n","        [1.5621e+03, 5.9436e+01, 1.7457e+03, 1.9121e+02, 7.9326e-01, 2.0000e+00],\n","        [1.2422e+03, 6.4514e+01, 1.3988e+03, 2.1029e+02, 7.8864e-01, 2.0000e+00],\n","        [1.8921e+03, 4.7039e+01, 2.0476e+03, 1.7520e+02, 7.8735e-01, 2.0000e+00],\n","        [1.8427e+03, 3.1067e+02, 2.0430e+03, 4.4692e+02, 7.8011e-01, 2.0000e+00],\n","        [1.4601e+03, 7.9794e+02, 1.6869e+03, 9.4462e+02, 7.7877e-01, 2.0000e+00],\n","        [6.7893e+02, 9.4470e+01, 8.5017e+02, 2.5266e+02, 7.7758e-01, 2.0000e+00],\n","        [1.7470e+03, 5.4426e+01, 1.9060e+03, 1.7038e+02, 7.5970e-01, 2.0000e+00],\n","        [1.1351e+02, 1.9857e+02, 2.9514e+02, 3.2941e+02, 7.4811e-01, 2.0000e+00],\n","        [4.9596e+02, 1.3368e+02, 6.6351e+02, 2.6019e+02, 7.4232e-01, 2.0000e+00],\n","        [0.0000e+00, 2.1955e+02, 1.0217e+02, 3.2194e+02, 7.2537e-01, 2.0000e+00],\n","        [0.0000e+00, 6.8488e+02, 7.8602e+02, 8.6184e+02, 6.8276e-01, 4.0000e+00],\n","        [0.0000e+00, 9.0477e+02, 1.3017e+02, 1.1397e+03, 6.7768e-01, 2.0000e+00],\n","        [1.1882e+03, 1.0384e+03, 1.3654e+03, 1.1500e+03, 6.6368e-01, 2.0000e+00],\n","        [8.9445e+02, 7.0345e+02, 1.0449e+03, 1.1500e+03, 6.1944e-01, 4.0000e+00],\n","        [1.4734e+03, 6.2483e+01, 1.5601e+03, 1.8696e+02, 5.5807e-01, 2.0000e+00],\n","        [5.9425e+02, 6.0431e+02, 6.3479e+02, 6.7003e+02, 4.9709e-01, 0.0000e+00],\n","        [1.8189e+03, 7.4912e+02, 1.9983e+03, 9.0883e+02, 4.3838e-01, 2.0000e+00],\n","        [0.0000e+00, 1.8347e+01, 7.8407e+02, 1.5768e+02, 4.3761e-01, 4.0000e+00],\n","        [2.9341e+02, 1.6207e+02, 4.3609e+02, 2.5036e+02, 3.9481e-01, 2.0000e+00],\n","        [2.0486e+00, 1.5512e+00, 2.0480e+03, 1.4122e+02, 3.5861e-01, 4.0000e+00],\n","        [0.0000e+00, 5.8799e+02, 2.0465e+03, 8.1485e+02, 3.3885e-01, 4.0000e+00],\n","        [0.0000e+00, 5.4460e+02, 2.0464e+03, 7.6974e+02, 3.2418e-01, 4.0000e+00],\n","        [5.9885e+02, 6.0520e+02, 6.3737e+02, 6.8329e+02, 3.0019e-01, 0.0000e+00],\n","        [0.0000e+00, 7.3614e+02, 3.2394e+02, 8.7465e+02, 2.8723e-01, 4.0000e+00],\n","        [0.0000e+00, 6.9727e+02, 5.3294e+02, 8.7273e+02, 2.8258e-01, 4.0000e+00]], device='cuda:0')\n"]}]},{"cell_type":"code","source":["plot_bboxes(image, results[0].boxes.boxes, labels={0: u\"backgroubd\", 1: u\"car\", 2: u\"garage\", 3: \"house\", 4: u\"pool\", 5: \"road\",}, score=False, conf=0.1)"],"metadata":{"id":"LarO3wlLYI9u","colab":{"base_uri":"https://localhost:8080/","height":614,"output_embedded_package_id":"1Pco_DFxI94vfHf5DJd_4KbYoYv82gVmj"},"executionInfo":{"status":"ok","timestamp":1680527795058,"user_tz":-180,"elapsed":3191,"user":{"displayName":"–ì–ª–µ–± –ö–æ–ª–æ–Ω–∏–Ω","userId":"16800121630135430864"}},"outputId":"a7d7b488-61d1-4d57-a212-118f5cf5b615"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","source":["# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n","# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º mode=predict –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n","# –í –¥–∞–Ω–Ω—ã–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥—ã—Ä–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ\n","!yolo task=detect mode=predict model=runs/detect/yolov85/weights/best.pt source=video_1.mp4 show=True imgsz=640 name=yolov8 hide_labels=True"],"metadata":{"id":"L_PGvx0QPdN2"},"execution_count":null,"outputs":[]}]}